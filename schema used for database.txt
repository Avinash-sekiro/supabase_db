-- Create Schools table
CREATE TABLE schools (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  address VARCHAR(200),
  contact_number VARCHAR(20),
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Create Sections table
CREATE TABLE sections (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  school_id BIGINT REFERENCES schools(id),
  section_name VARCHAR(50) NOT NULL,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Create Students table
CREATE TABLE students (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  section_id BIGINT REFERENCES sections(id),
  student_name VARCHAR(100) NOT NULL,
  roll_number VARCHAR(20),
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Add indexes for better query performance
CREATE INDEX idx_schools_name ON schools(name);
CREATE INDEX idx_sections_school_id ON sections(school_id);
CREATE INDEX idx_sections_name ON sections(section_name);
CREATE INDEX idx_students_section_id ON students(section_id);
CREATE INDEX idx_students_name ON students(student_name);
CREATE INDEX idx_students_roll_number ON students(roll_number);

-- Enable Row Level Security
ALTER TABLE schools ENABLE ROW LEVEL SECURITY;
ALTER TABLE sections ENABLE ROW LEVEL SECURITY;
ALTER TABLE students ENABLE ROW LEVEL SECURITY;

-- Create policies for public read access and authenticated user operations
CREATE POLICY "Enable read access for all users" ON schools FOR SELECT USING (true);
CREATE POLICY "Enable insert for authenticated users only" ON schools FOR INSERT WITH CHECK (auth.role() = 'authenticated');
CREATE POLICY "Enable update for authenticated users only" ON schools FOR UPDATE USING (auth.role() = 'authenticated');
CREATE POLICY "Enable delete for authenticated users only" ON schools FOR DELETE USING (auth.role() = 'authenticated');

CREATE POLICY "Enable read access for all users" ON sections FOR SELECT USING (true);
CREATE POLICY "Enable insert for authenticated users only" ON sections FOR INSERT WITH CHECK (auth.role() = 'authenticated');
CREATE POLICY "Enable update for authenticated users only" ON sections FOR UPDATE USING (auth.role() = 'authenticated');
CREATE POLICY "Enable delete for authenticated users only" ON sections FOR DELETE USING (auth.role() = 'authenticated');

CREATE POLICY "Enable read access for all users" ON students FOR SELECT USING (true);
CREATE POLICY "Enable insert for authenticated users only" ON students FOR INSERT WITH CHECK (auth.role() = 'authenticated');
CREATE POLICY "Enable update for authenticated users only" ON students FOR UPDATE USING (auth.role() = 'authenticated');
CREATE POLICY "Enable delete for authenticated users only" ON students FOR DELETE USING (auth.role() = 'authenticated');

-- Insert sample data
INSERT INTO schools (name, address, contact_number) VALUES
('Sample School 1', '123 Education St', '555-0101'),
('Sample School 2', '456 Learning Ave', '555-0102');

INSERT INTO sections (school_id, section_name) VALUES
(1, 'Section A'),
(1, 'Section B'),
(2, 'Section X'),
(2, 'Section Y');

INSERT INTO students (section_id, student_name, roll_number) VALUES
(1, 'John Doe', 'A001'),
(1, 'Jane Smith', 'A002'),
(2, 'Bob Johnson', 'B001'),
(3, 'Alice Brown', 'X001');